generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "public")]
}

enum Role {
  ADMIN
  USER
}

model User {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String              @db.VarChar(50)
  email             String              @unique @db.VarChar(60)
  emailVerified     DateTime?
  image             String?
  password          String?             @db.VarChar(255)
  role              Role                @default(USER)
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @updatedAt
  books             Book[]
  accounts          Account[]
  verificationToken VerificationToken[]
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Book {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String @db.VarChar(255)
  author      String @db.VarChar(30)
  description String @db.Text
  cover       String @db.VarChar(255)
  genre       String @db.VarChar(30)
  pages       Int    @default(0) @db.Integer
  stock       Int    @default(0) @db.Integer
  rentPrice   Float  @default(0) @db.Real
  sellPrice   Float  @default(0) @db.Real
  sold        Int    @default(0) @db.Integer
  ISBN        String @db.VarChar(30)
  renters     User[]
}

model VerificationToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String
  token   String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires DateTime
  userId  String   @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}
